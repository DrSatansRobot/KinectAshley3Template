                //{
                    // allocate space to put depth pixels
                    _depthBits = new DepthImagePixel[frame.PixelDataLength];
                    
                    // allocate space to put color pixels
                    _colorBits = new byte[_sensor.DepthStream.FramePixelDataLength * sizeof(int)];

                    // This is the bitmap we'll display on-screen
                    this.depthBitmap = new WriteableBitmap(_sensor.DepthStream.FrameWidth, _sensor.DepthStream.FrameHeight, 96.0, 96.0, PixelFormats.Bgr32, null);

                    // Set the image we display to point to the bitmap where we'll put the image data
                    this.canvasD.Source = this.depthBitmap;

                    // Add an event handler to be called whenever there is new depth frame data
                    this._sensor.DepthFrameReady += this.sensor_DepthFrameReady;

                    // is a depth stream
                    //this.isDepth = true;

                    // copy pixel data to temp array
                    frame.CopyDepthImagePixelDataTo(_depthBits);            
                    
                    // max and min depths
                    int minDepth = frame.MinDepth;
                    int maxDepth = frame.MaxDepth;

                    // convert depth to RGB
                    int colorPixelIndex = 0;
                    for (int i = 0; i < _depthBits.Length; ++i)
                    {
                        short depth = _depthBits[i].Depth;
                        byte intensity = (byte)(depth >= minDepth && depth <= maxDepth ? depth : 0);

                        this.colorPixels[colorPixelIndex++] = intensity;
                        this.colorPixels[colorPixelIndex++] = intensity;
                        this.colorPixels[colorPixelIndex++] = intensity;

                        ++colorPixelIndex;
                    }

                    // write to bitmap
                    this.depthBitmap.WritePixels(
                        new Int32Rect(0, 0, this.depthBitmap.PixelWidth, this.depthBitmap.PixelHeight),
                        this.depthColorPixels,
                        this.depthBitmap.PixelWidth * sizeof(int),
                        0);